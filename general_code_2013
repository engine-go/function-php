<?php

//反转混合中英文字符
function str_utf8($str)
{
  return join('',array_reverse(preg_split("//u", $str)));
}

//二维数组进行排序
function array_sort($array_name,$row_id,$order_type)
{
  $array_temp=array();
   foreach($array_name as $key=> $value)
   {
     $array_temp[$key]=$value[$row_id];     
   }
   
   //先准备一个临时数组，把要比较的那个“键”放进去
   if($order_type==="ASC")
   {
     asort($array_temp);
   }
   else
   {
     arsort($array_temp);
   }
   
   //判断升序or降序，通过asort（arsort）排序，键名保留
   $result_array=array();
   foreach($array_temp as $key=>$value)
   {
     $result_array[$key]=$array_name[$key];
   }
   
   return $result_array;
}



//二分法查找(针对有序的列进行查找)
function binary_search($arrData,$val) {
    $len = count($arrData);
    if($len == 0) return -1;

    $start = 0;
    $end   = $len - 1;

    while($start <= $end) {
        $middle = intval(($start + $end)/2);
        if($arrData[$middle] == $val) {
            return $middle;
        } elseif ($arrData[$middle] > $val) {
            $end = $middle - 1 ;
        } elseif ($arrData[$middle] < $val) {
            $start = $middle + 1;
        }
    }
    return -1; 
}

example: $target = binary_search(array(1,2,3,4,5),3);



//$rand_arr里面放一些概率 ，例如$rand_arr(10,20,30);最后返回键值
public function new_rand($rand_arr) {

		if ( empty($rand_arr) || ! is_array($rand_arr) )
			return false;

		$start = 1;
		$end = 0;

		$min = min($rand_arr);
		$pow = 0;

		$change = explode( '.', $min );
		if ( count($change) == 2 )
			$pow = strlen($change[1]);

		foreach ( $rand_arr as $k => $v ) {

			$rand_arr[$k] = $v * pow( 10, $pow );

		}

		$odds_sum = 0;

		foreach ( $rand_arr as $k => $v ) {

			$odds_sum += $v;
			$odds_arr[$k] = array( $start, $v + $end, );
			$start += $v;
			$end += $v;

		}

		$final = mt_rand( 1, $odds_sum );

		foreach ( $odds_arr as $key => $arr ) {

			if ( $final >= $arr[0] && $final <= $arr[1] ) {

				$ret = $key;
				break;

			}

		}

		return isset($ret) ? $ret : false;

	}//End of function
